#!/bin/sh
#!/bin/bash
#!/usr/bin/bash
#!/usr/bin/env bash
#!/data/data/com.termux/files/usr/bin/bash
###############################################
#     _   _            _  ___                 #
#    | | | | __ _  ___| |/ (_)_ __   __ _     #
#    | |_| |/ _' |/ __| ' /| | '_ \ / _' |    #
#    |  _  | (_| | (__| . \| | | | | (_| |    #
#    |_| |_|\__,_|\___|_|\_\_|_| |_|\__, |    #
#                                   |___/     #
###############################################
# Name : Anlominus
# Description : HacKingPro is a hacking tools installer and package manager for hacker's.
# New Date : 2022 January
# Aouther: Anlominus RhytMix 2022
# Skils: Best Copyrigter IN the COSMOS!
# BIG THANX TO ALL COMUNITY THAT SHARE ALL THAT FREE GREAT SCRIPTS
# CREDIT: ToAllWorldCreatorsHackingTools
# Location: Made With Love IN ISRAEL !
# Source: https://github.com/Anlominus/Anlominus
###############################################
##################################
#-----------) Colors (-----------#
##################################
# |
nc="\033[00m"
white="\033[1;37m"
grey="\033[0;37m"
purple="\033[0;35m"
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
purple="\033[0;35m"
cyan="\033[0;36m"
cafe="\033[0;33m"
fiuscha="\033[0;35m"
blue="\033[1;34m"
orange="\033[38;5;202m"
# |
###################################
#-----------) Letters (-----------#
###################################
# |
nr="R"
ni="I"
nt="T"
nx="X"
nq="Q"
na="A"
nb="ab"
n0="0"
n1="1"
n2="2"
n3="3"
n4="4"
n5="5"
n6="6"
n8="8"
n7="7"
n9="9"
n10="10"
n11="11"
n12="12"
n13="13"
n14="14"
n15="15"
n16="16"
n17="17"
n18="18"
# |
##########################
#    SymbolVariables     #
##########################
# |
cBack="$red[$cyan Back $red]$grey"
uSage="$red[$cyan USAGE $red]$grey("
installingDir="$red[$grey Installing Dir $red]$cyan"
# |
##########################
#    SymbolVariables     #
##########################
# 💪  🏴 ‍ ☠️ 👁‍ 👌 💀 📌 👍
# ♥️ ✯ 🔞 🗨 👩‍ 💻 😜 😡
# 💥 ☣ ✍ █ ▓ ░ ▒ 💿 🎧 📸
# 👤
cEye="$green 👁 $cyan"
cDock="$purple[$green📌$purple]$cyan"
cPassKey="$purple[$green🔐$purple]$cyan"
cAnlominus="$purple[$green👽$purple]$cyan"
cAlien="$purple[$green🙏$purple]$cyan"
cGlasses="$purple[$green👓$purple]$yellow"
cLock="$red[$yellow🔒$red]$grey"
cInvalid="$red[$yellow🚫$red]$red"
cKey="$red[$yellow🔑$red]$yellow"
cLink="$red[$orange🔗$red]$orange"
cSharp="$red[$yellow#$red]$blue"
cInfo="$red[$yellow!$red]$blue"
cPlus="$red[$green+$red]$white"
cDone="$red[$green✔$red]$green"
cFalse="$yellow[$red✘$yellow]$red"
cDanger="$yellow ⚠️ $red"
# |
currentDir="${blue}Dir$cyan $(pwd)"

##########################
#    NumberVariables     #
##########################
# |
cr="$orange[$green$nr$orange]$grey"
ci="$orange[$green$ni$orange]$grey"
ct="$orange[$green$nt$orange]$grey"
cx="$orange[$green$nx$orange]$grey"
cq="$orange[$green$nq$orange]$grey"
ca="$orange[$green$na$orange]$grey"
cb="$orange[$green$nb$orange]$grey"
c0="$orange[$green$n0$orange]$cafe"
c1="$orange[$green$n1$orange]$cafe"
c2="$orange[$green$n2$orange]$cafe"
c3="$orange[$green$n3$orange]$cafe"
c4="$orange[$green$n4$orange]$cafe"
c5="$orange[$green$n5$orange]$cafe"
c6="$orange[$green$n6$orange]$cafe"
c7="$orange[$green$n7$orange]$cafe"
c8="$orange[$green$n8$orange]$cafe"
c9="$orange[$green$n9$orange]$cafe"
c10="$orange[$green$n10$orange]$cafe"
c11="$orange[$green$n11$orange]$cafe"
c12="$orange[$green$n12$orange]$cafe"
c13="$orange[$green$n13$orange]$cafe"
c14="$orange[$green$n14$orange]$cafe"
c15="$orange[$green$n15$orange]$cafe"
c16="$orange[$green$n16$orange]$cafe"
c17="$orange[$green$n17$orange]$cafe"
c18="$orange[$green$n18$orange]$cafe"
##################################
#-----------) Banner (-----------#
##################################
# |
Banner(){
  echo "
  $cSharp#############################################$cSharp
  $cSharp     _   _            _  ___                 $cSharp
  $cSharp    | | | | __ _  ___| |/ (_)_ __   __ _     $cSharp
  $cSharp    | |_| |/ _' |/ __| ' /| | '_ \ / _' |    $cSharp
  $cSharp    |  _  | (_| | (__| . \| | | | | (_| |    $cSharp
  $cSharp    |_| |_|\__,_|\___|_|\_\_|_| |_|\__, |    $cSharp
  $cSharp                                   |___/     $cSharp
  $cSharp#############################################$cSharp
  $cSharp         ▀▀█▀▀ █▀▀█ █▀▀█ █   █▀▀             $cSharp
  $cSharp           █   █  █ █  █ █   ▀▀█             $cSharp
  $cSharp           ▀   ▀▀▀▀ ▀▀▀▀ ▀▀▀ ▀▀▀$orange v${green}1          $cSharp
  $cSharp https://www.github.com/Anlominus/HacKingPro $cSharp
  $cSharp#############################################$cSharp"
}
BannerURL(){
  echo "  $cSharp https://www.github.com/Anlominus $cSharp\n"
}
BannerMan(){
  echo "$purple
                          .
                      ..',,'..
                    .',,,,,,,,,.
                   .',,,'..',,,,'.
                  .',,'.     .,,,'
                 .',,.        .,,,.
                .',..           .,,.
                .'.              ..,.
                .                  .'
               ..   $green  Aภl๏miภuຮ $purple   .
               ..                   .
               ..                  ...
        ....''''.   $blue HacKingPro$purple    .','''....
      .',,,,,,,,'..               ..',,,,,,,,'.
     ...'',,,,,,,'...          ....',,,,,,,,'...
    ....'',;;;;;;;,,'''......'''',,;;;;;;;,'''...
   ......'',,;;;:::/xxxxxxxxxxxxxxxxxxxxxxxxxxx/:'.
   .....'.'',,;;::/xxxxxxxxxxxxxxxxxxxxxxxxxxx/'....
   .......',,;;::/xxxxxxxxxxxxxxxxxxxxxxxxxxx/,......
   .'''''',,;;::/xxxxxxxxxx${cyan}DAT0S${purple}xxxxxxxxxxxx/,.......
  ..'''',',;;::/xxxxxxxxx${blue}ANL0M1NUS${purple}xxxxxxxxx/,'''''...
 ........';;::/xxxxxxxxxxxxxxxxxxxxxxxxxxx/:'.........
......  .':::/xxxxxxxxxxxxxxxxxxxxxxxxxxx/::'..  ......
......:.;:::/xxxxxxxxxxxxxxxxxxxxxxxxxxx/::;'c,':......
 .''..cc.''''''',,,,,,,;;;;;,,,,,,,,''''....:.cc..''.
  \t ${orange}  ┌──[${blue}Anlominus${purple}@${red}HacKingPro${cyan}$~${orange}]
  \t ${orange}  └──╼ ${cyan} sh HacKingPro
  "
}
BannerExit(){
  echo "
  $cFalse#############################################$cFalse
  $cInfo                                             $cInfo
  $cInfo  ╔═══════════════════════════════════════╗  $cInfo
  $cInfo  ╠═>$cDanger Exiting Anlominus Tools...$cDanger${blue} <==║  $cInfo
  $cInfo  ╚═══════════════════════════════════════╝  $cInfo
  $cInfo                                             $cInfo
  $cFalse#############################################$cFalse"
}
SourceCodeURL(){
  echo "\t  $cLink https://www.github.com/Anlominus/HacKingPro $cLink\n"
}
PromptFun(){
  echo "  \t ${orange}  ┌──[${blue}Anlominus${purple}@${red}HacKingPro${cyan}$~${orange}]"
  echo -n "  \t ${orange}  └──╼ ${cyan} "
}
################################################
#-----------) Anlominus Escalation (-----------#
################################################
# |
AnlominusUsersGroups(){
  if [ "$outfile" ]; then
  echo "### USER/GROUP ##########################################" >> $outfile
  else
  echo "${blue}### USER/GROUP ##########################################${red}"
  fi

  currusr=`id 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$currusr" ]; then
  echo "Current user/group info:\n$currusr" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$currusr" ]; then
  echo "${cafe} mCurrent user/group info:${white}\n$currusr"
        echo "\n"
      else
        :
      fi
  fi

  grpinfo=`getent group $who 2>/dev/null`
  if [ "$outfile" ];then
  if [ "$grpinfo" ]; then
  echo "All members of 'our' group(s):\n$grpinfo" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$grpinfo" ]; then
  echo "${cafe} mAll members of 'our' group(s):${white}\n$grpinfo"
        echo "\n"
      else
        :
      fi
  fi

  lastlogedonusrs=`lastlog |grep -v "Never" 2>/dev/null`
  if [ "$outfile" ];then
  if [ "$lastlogedonusrs" ]; then
  echo "Users that have previously logged onto the system:\n$lastlogedonusrs" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$lastlogedonusrs" ]; then
  echo "${cafe} mUsers that have previously logged onto the system:${white}\n$lastlogedonusrs"
        echo "\n"
      else
        :
      fi
  fi

  usrsinfo=`cat /etc/passwd | cut -d ":" -f 1,2,3,4 2>/dev/null`
  if [ "$outfile" ];then
  if [ "$usrsinfo" ]; then
  echo "All users and uid/gid info:\n$usrsinfo" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$usrsinfo" ]; then
  echo "${cafe} mAll users and uid/gid info:${white}\n$usrsinfo"
        echo "\n"
      else
        :
      fi
  fi

  hashesinpasswd=`grep -v '^[^:]*:[x]' /etc/passwd 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$hashesinpasswd" ]; then
  echo "It looks like we have password hashes in /etc/passwd!\n$hashesinpasswd" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$hashesinpasswd" ]; then
  echo "${yellow}t looks like we have password hashes in /etc/passwd!${white}\n$hashesinpasswd"
        echo "\n"
      else
        :
      fi
  fi

  #locate custom user accounts with some 'known default' uids
  readpasswd=`grep -v "^#" /etc/passwd | awk -F: '$3 == 0 || $3 == 500 || $3 == 501 || $3 == 502 || $3 == 1000 || $3 == 1001 || $3 == 1002 || $3 == 2000 || $3 == 2001 || $3 == 2002 { print }'`
  if [ "$outfile" ]; then
  if [ "$readpasswd" ]; then
  echo "Sample entires from /etc/passwd (searching for uid values 0, 500, 501, 502, 1000, 1001, 1002, 2000, 2001, 2002):\n$readpasswd" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$readpasswd" ]; then
  echo "${cafe} mSample entires from /etc/passwd (searching for uid values 0, 500, 501, 502, 1000, 1001, 1002, 2000, 2001, 2002):${white}\n$readpasswd"
        echo "\n"
      else
        :
      fi
  fi

  readshadow=`cat /etc/shadow 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$readshadow" ]; then
  echo "***We can read the shadow file!\n$readshadow" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$readshadow" ]; then
  echo "${yellow}***We can read the shadow file!${white}\n$readshadow"
        echo "\n"
      else
        :
      fi
  fi

  readmasterpasswd=`cat /etc/master.passwd 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$readmasterpasswd" ]; then
  echo "***We can read the master.passwd file!\n$readmasterpasswd" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$readmasterpasswd" ]; then
  echo "${yellow}***We can read the master.passwd file!${white}\n$readmasterpasswd"
        echo "\n"
      else
        :
      fi
  fi

  #all root accounts (uid 0)
  if [ "$outfile" ]; then
  echo "Super user account(s):" >> $outfile; grep -v "^#" /etc/passwd | awk -F: '$3 == 0 { print $1 }' >> $outfile
      echo "\n" >> $outfile
  else
  echo "${cafe} mSuper user account(s):${red}"; grep -v "^#" /etc/passwd | awk -F: '$3 == 0 { print $1}'
      echo "\n"
  fi

  #pull out vital sudoers info
  sudoers=`cat /etc/sudoers 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$sudoers" ]; then
  echo "Sudoers configuration:" >> $outfile; cat /etc/sudoers 2>/dev/null | grep -A 1 "User priv" >> $outfile; cat /etc/sudoers | grep -A 1 "Allow" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$sudoers" ]; then
  echo "${cafe} mSudoers configuration:${red}"; cat /etc/sudoers 2>/dev/null | grep -A 1 "User priv"; cat /etc/sudoers | grep -A 1 "Allow"
        echo "\n"
      else
        :
      fi
  fi

  #can we sudo without supplying a password
  sudoperms=`echo '' | sudo -S -l 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$sudoperms" ]; then
  echo "We can sudo without supplying a password!\n$sudoperms" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$sudoperms" ]; then
  echo "${yellow}We can sudo without supplying a password!${white}\n$sudoperms"
        echo "\n"
      else
        :
      fi
  fi

  #known 'good' breakout binaries
  sudopwnage=`echo '' | sudo -S -l 2>/dev/null | grep -w 'nmap\|perl\|'awk'\|'find'\|'bash'\|'sh'\|'man'\|'more'\|'less'\|'vi'\|'vim'\|'nc'\|'netcat'\|python\|ruby\|lua\|irb' | xargs -r ls -la 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$sudopwnage" ]; then
  echo "***Possible Sudo PWNAGE!\n$sudopwnage" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$sudopwnage" ]; then
  echo "${yellow}***Possible Sudo PWNAGE!${white}\n$sudopwnage"
        echo "\n"
      else
        :
      fi
  fi

  rthmdir=`ls -ahl /root/ 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$rthmdir" ]; then
  echo "***We can read root's home directory!\n$rthmdir" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$rthmdir" ]; then
  echo "${yellow}***We can read root's home directory!${white}\n$rthmdir"
        echo "\n"
      else
        :
      fi
  fi

  homedirperms=`ls -ahl /home/ 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$homedirperms" ]; then
  echo "Are permissions on /home directories lax:\n$homedirperms" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$homedirperms" ]; then
  echo "${cafe} mAre permissions on /home directories lax:${white}\n$homedirperms"
        echo "\n"
      else
        :
      fi
  fi

  wrfileshm=`find /home/ -perm -4 -type f -exec ls -al {} \; 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$wrfileshm" ]; then
  echo "World-readable files within /home:\n$wrfileshm" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$wrfileshm" ]; then
  echo "${cafe} mWorld-readable files within /home:${white}\n$wrfileshm"
        echo "\n"
      else
        :
      fi
  fi

  homedircontents=`ls -ahl ~ 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$homedircontents" ]; then
  echo "Home directory contents:\n$homedircontents" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$homedircontents" ]; then
  echo "${cafe} mHome directory contents:${white}\n$homedircontents"
        echo "\n"
      else
        :
      fi
  fi

  sshfiles=`find / -name "id_dsa*" -o -name "id_rsa*" -o -name "known_hosts" -o -name "authorized_hosts" -o -name "authorized_keys" 2>/dev/null |xargs -r ls -la`
  if [ "$outfile" ];then
  if [ "$sshfiles" ]; then
  echo "SSH keys/host information found in the following locations:\n$sshfiles" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$sshfiles" ]; then
  echo "${cafe} mSSH keys/host information found in the following locations:${white}\n$sshfiles"
        echo "\n"
      else
        :
      fi
  fi

  sshrootlogin=`grep "PermitRootLogin " /etc/ssh/sshd_config 2>/dev/null | grep -v "#" | awk '{print $2}'`
  if [ "$outfile" ]; then
  if [ "$sshrootlogin" = "yes" ]; then
  echo "Root is allowed to login via SSH:" >> $outfile; grep "PermitRootLogin " /etc/ssh/sshd_config 2>/dev/null | grep -v "#" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$sshrootlogin" = "yes" ]; then
  echo "${cafe} mRoot is allowed to login via SSH:${red}"; grep "PermitRootLogin " /etc/ssh/sshd_config 2>/dev/null | grep -v "#"
        echo "\n"
      else
        :
      fi
  fi
}
AnlominusSystem(){
  #option to store to a file
  outfile="$1"
  #enter a single keyword that'll be used to search within *.conf, *.log & *.ini files.
  if [ "$outfile" ]; then
    clear
  echo "${red}Enter keywords (space separated) that'll be used to search in *.conf, *.log and *.ini files (e.g. password cred)" >> $outfile
      #accepts search keywords from commandline
      keyword="$2"
      echo "$keyword" >> $outfile
  else
    clear
  echo "${red}Enter keywords (space separated) that'll be used to search in *.conf, *.log and *.ini files (e.g. password cred)"
      #accepts search keywords from commandline
      read keyword
  fi
  who=`whoami`
  if [ "$outfile" ]; then
  echo "\n" >> $outfile
      thedate=`date`
      echo "Scan started at: $thedate" >> $outfile
      echo "\n" >> $outfile
  else
  echo "\n"
      echo "${green}Scan started at:"; date
      echo "${white}\n"
  fi
  if [ "$outfile" ]; then
    echo "
  $cInfo#############################################$cInfo
  $cInfo                                             $cInfo
  $cInfo  ╔═══════════════════════════════════════╗  $cInfo
  $cInfo  ╠═>              SYSTEM              <==║  $cInfo
  $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
    echo -n "      $cInfo  ╚═➤  "
  else
    echo "
  $cInfo#############################################$cInfo
  $cInfo                                             $cInfo
  $cInfo  ╔═══════════════════════════════════════╗  $cInfo
  $cInfo  ╠═>              SYSTEM              <==║  $cInfo
  $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
    echo -n "      $cInfo  ╚═➤  "
  fi
  unameinfo=`uname -a 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$unameinfo" ]; then
  echo "Kernel information:\n$unameinfo" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$unameinfo" ]; then
  echo "${cafe} Kernel information:${white}\n\n$unameinfo"
        echo "\n"
      else
        :
      fi
  fi
  echo "
  $cInfo#############################################$cInfo
  $cInfo                                             $cInfo
  $cInfo  ╔═══════════════════════════════════════╗  $cInfo
  $cInfo  ╠═>              SYSTEM              <==║  $cInfo
  $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
  echo -n "      $cInfo  ╚═➤  "
  procver=`cat /proc/version 2>/dev/null`
  if [ "$outfile" ];then
  if [ "$procver" ]; then
  echo "Kernel information (continued):\n$procver" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$procver" ]; then
  echo "${cafe} Kernel information (continued):${white}\n\n$procver"
        echo "\n"
      else
        :
      fi
  fi
  #search all *-release files for version info
  echo "
  $cInfo#############################################$cInfo
  $cInfo                                             $cInfo
  $cInfo  ╔═══════════════════════════════════════╗  $cInfo
  $cInfo  ╠═>              SYSTEM              <==║  $cInfo
  $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
  echo -n "   $cInfo  ╚═➤  "
  release=`cat /etc/*-release 2>/dev/null`
  if [ "$outfile" ];then
  if [ "$release" ]; then
  echo "Specific release information:\n$release" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$release" ]; then
  echo "${cafe} Specific release information:${white}\n\n$release"
          echo "\n"
      else
          :
      fi
  fi
  echo "
  $cInfo#############################################$cInfo
  $cInfo                                             $cInfo
  $cInfo  ╔═══════════════════════════════════════╗  $cInfo
  $cInfo  ╠═>              SYSTEM              <==║  $cInfo
  $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
  echo -n "      $cInfo  ╚═➤  "
  hostnamed=`hostname 2>/dev/null`
  if [ "$outfile" ];then
  if [ "$hostnamed" ]; then
  echo "Hostname:\n$hostnamed" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$hostnamed" ]; then
  echo "${cafe} Hostname:${white}\n\n$hostnamed"
        echo "\n"
      else
        :
      fi
  fi
  echo "
  $cInfo#############################################$cInfo
  $cInfo                                             $cInfo
  $cInfo  ╔═══════════════════════════════════════╗  $cInfo
  $cInfo  ╠═>    PRESS ENTER TO GOING BACK     <==║  $cInfo
  $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
  echo -n "      $cInfo  ╚═➤ "
  read read_somthing
}
AnlominusNetworks(){
  Banner
  if [ "$outfile" ]; then
  echo "### NETWORKING ##########################################" >> $outfile
  else
  echo "${blue}### NETWORKING ##########################################${red}"
  fi

  nicinfo=`/sbin/ifconfig -a 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$nicinfo" ]; then
  echo "Network & IP info:\n$nicinfo" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$nicinfo" ]; then
  echo "${cafe} mNetwork & IP info:${white}\n$nicinfo"
        echo "\n"
      else
        :
      fi
  fi

  nsinfo=`cat /etc/resolv.conf 2>/dev/null | grep "nameserver"`
  if [ "$outfile" ]; then
  if [ "$nsinfo" ]; then
  echo "Nameserver(s):\n$nsinfo" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$nsinfo" ]; then
  echo "${cafe} mNameserver(s):${white}\n$nsinfo"
        echo "\n"
      else
        :
      fi
  fi

  defroute=`route 2>/dev/null | grep default`
  if [ "$outfile" ]; then
  if [ "$defroute" ]; then
  echo "Default route:\n$defroute" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$defroute" ]; then
  echo "${cafe} mDefault route:${white}\n$defroute"
        echo "\n"
      else
        :
      fi
  fi

  tcpservs=`netstat -antp 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$tcpservs" ]; then
  echo "Listening TCP:\n$tcpservs" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$tcpservs" ]; then
  echo "${cafe} mListening TCP:${white}\n$tcpservs"
        echo "\n"
      else
        :
      fi
  fi

  udpservs=`netstat -anup 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$udpservs" ]; then
  echo "Listening UDP:\n$udpservs" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$udpservs" ]; then
  echo "${cafe} mListening UDP:${white}\n$udpservs"
        echo "\n"
      else
        :
      fi
  fi
}
AnlominusEnvironment(){
  if [ "$outfile" ]; then
  echo "### ENVIRONMENTAL #######################################" >> $outfile
  else
  echo "${blue}### ENVIRONMENTAL #######################################${red}"
  fi

  pathinfo=`echo $PATH 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$pathinfo" ]; then
  echo "Path information:\n$pathinfo" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$pathinfo" ]; then
  echo "${cafe} mPath information:${white}\n$pathinfo"
        echo "\n"
      else
        :
      fi
  fi

  shellinfo=`cat /etc/shells 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$shellinfo" ]; then
  echo "Available shells:\n$shellinfo" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$shellinfo" ]; then
  echo "${cafe} mAvailable shells:${white}\n$shellinfo"
        echo "\n"
      else
        :
      fi
  fi

}
AnlominusJobsTasks(){
  if [ "$outfile" ]; then
  echo "### JOBS/TASKS ##########################################" >> $outfile
  else
  echo "${blue}### JOBS/TASKS ##########################################${red}"
  fi

  cronjobs=`ls -la /etc/cron* 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$cronjobs" ]; then
  echo "Cron jobs:\n$cronjobs" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$cronjobs" ]; then
  echo "${cafe} mCron jobs:${white}\n$cronjobs"
        echo "\n"
      else
        :
      fi
  fi

  cronjobwwperms=`find /etc/cron* -perm -0002 -exec ls -la {} \; -exec cat {} 2>/dev/null \;`
  if [ "$outfile" ]; then
  if [ "$cronjobwwperms" ]; then
  echo "***World-writable cron jobs and file contents:\n$cronjobwwperms" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$cronjobwwperms" ]; then
  echo "\e[00;33m***World-writable cron jobs and file contents:${white}\n$cronjobwwperms"
        echo "\n"
      else
        :
      fi
  fi

  crontab=`cat /etc/crontab 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$crontab" ]; then
  echo "Crontab contents:\n$crontab" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$crontab" ]; then
  echo "${cafe} mCrontab contents:${white}\n$crontab"
        echo "\n"
      else
        :
      fi
  fi

  cronallowdeny=`ls -la /etc/cron.allow 2>/dev/null && cat /etc/cron.allow 2>/dev/null; ls -la /etc/cron.deny 2>/dev/null && cat /etc/cron.deny 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$cronallowdeny" ]; then
  echo "Cron Alloy/Deny entries:\n$cronallowdeny" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$cronallowdeny" ]; then
  echo "${cafe} mCron Alloy/Deny entries:${white}\n$cronallowdeny"
        echo "\n"
      else
        :
      fi
  fi

  crontabvar=`ls -la /var/spool/cron/crontabs 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$crontabvar" ]; then
  echo "Anything interesting in /var/spool/cron/crontabs:\n$crontabvar" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$crontabvar" ]; then
  echo "${cafe} mAnything interesting in /var/spool/cron/crontabs:${white}\n$crontabvar"
        echo "\n"
      else
        :
      fi
  fi

  anacronjobs=`ls -la /etc/anacrontab 2>/dev/null; cat /etc/anacrontab 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$anacronjobs" ]; then
  echo "Anacron jobs and associated file permissions:\n$anacronjobs" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$anacronjobs" ]; then
  echo "${cafe} mAnacron jobs and associated file permissions:${white}\n$anacronjobs"
        echo "\n"
      else
        :
      fi
  fi

  anacrontab=`ls -la /var/spool/anacron 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$anacrontab" ]; then
  echo "When were jobs last executed (/var/spool/anacron contents):\n$anacrontab" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$anacrontab" ]; then
  echo "${cafe} mWhen were jobs last executed (/var/spool/anacron contents):${white}\n$anacrontab"
        echo "\n"
      else
        :
      fi
  fi

  #pull out account names from /etc/passwd and see if any users have associated cronjobs (priv command)
  cronother=`cat /etc/passwd | cut -d ":" -f 1 | xargs -n1 crontab -l -u 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$cronother" ]; then
  echo "Jobs held by all users:\n$cronother" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$cronother" ]; then
  echo "${cafe} mJobs held by all users:${white}\n$cronother"
        echo "\n"
      else
        :
      fi
  fi
}
AnlominusServices(){
  if [ "$outfile" ]; then
  echo "### SERVICES #############################################" >> $outfile
  else
  echo "${blue}### SERVICES #############################################${red}"
  fi

  psaux=`ps aux 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$psaux" ]; then
  echo "Running processes:\n$psaux" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$psaux" ]; then
  echo "${cafe} mRunning processes:${white}\n$psaux"
        echo "\n"
      else
        :
      fi
  fi

  #lookup process binary path and permissisons
  procperm=`ps aux | awk '{print $11}'|xargs -r ls -la 2>/dev/null |awk '!x[$0]++'`
  if [ "$outfile" ]; then
  if [ "$procperm" ]; then
  echo "Process binaries & associated permissions (from above list):\n$procperm" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$procperm" ]; then
  echo "${cafe} mProcess binaries & associated permissions (from above list):${white}\n$procperm"
        echo "\n"
      else
        :
      fi
  fi

  inetdread=`cat /etc/inetd.conf 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$inetdread" ]; then
  echo "Contents of /etc/inetd.conf:\n$inetdread" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$inetdread" ]; then
  echo "${cafe} mContents of /etc/inetd.conf:${white}\n$inetdread"
        echo "\n"
      else
        :
      fi
  fi

  #very 'rough' command to extract associated binaries from inetd.conf & show permisisons of each
  inetdbinperms=`cat /etc/inetd.conf 2>/dev/null | awk '{print $7}' |xargs -r ls -la 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$inetdbinperms" ]; then
  echo "The related inetd binary permissions:\n$inetdbinperms" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$inetdbinperms" ]; then
  echo "${cafe} mThe related inetd binary permissions:${white}\n$inetdbinperms"
        echo "\n"
      else
        :
      fi
  fi

  xinetdread=`cat /etc/xinetd.conf 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$xinetdread" ]; then
  echo "Contents of /etc/xinetd.conf:\n$xinetdread" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$xinetdread" ]; then
  echo "${cafe} mContents of /etc/xinetd.conf:${white}\n$xinetdread"
        echo "\n"
      else
        :
      fi
  fi

  xinetdincd=`cat /etc/xinetd.conf 2>/dev/null |grep "/etc/xinetd.d" 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$xinetdincd" ]; then
  echo "/etc/xinetd.d is included in /etc/xinetd.conf - associated binary permissions are listed below:"; ls -la /etc/xinetd.d 2>/dev/null >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$xinetdincd" ]; then
  echo "${cafe} m/etc/xinetd.d is included in /etc/xinetd.conf - associated binary permissions are listed below:${red}"; ls -la /etc/xinetd.d 2>/dev/null
        echo "\n"
      else
        :
      fi
  fi

  #very 'rough' command to extract associated binaries from xinetd.conf & show permisisons of each
  xinetdbinperms=`cat /etc/xinetd.conf 2>/dev/null | awk '{print $7}' |xargs -r ls -la 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$xinetdbinperms" ]; then
  echo "The related xinetd binary permissions:$xinetdbinperms"; >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$xinetdbinperms" ]; then
  echo "${cafe} mThe related xinetd binary permissions:${white}\n$xinetdbinperms";
        echo "\n"
      else
        :
      fi
  fi

  initdread=`ls -la /etc/init.d 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$initdread" ]; then
  echo "/etc/init.d/ binary permissions:\n$initdread" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$initdread" ]; then
  echo "${cafe} m/etc/init.d/ binary permissions:${white}\n$initdread"
        echo "\n"
      else
        :
      fi
  fi

  rcdread=`ls -la /etc/rc.d/init.d 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$rcdread" ]; then
  echo "/etc/rc.d/init.d binary permissions:\n$rcdread" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$rcdread" ]; then
  echo "${cafe} m/etc/rc.d/init.d binary permissions:${white}\n$rcdread"
        echo "\n"
      else
        :
      fi
  fi

  usrrcdread=`ls -la /usr/local/etc/rc.d 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$usrrcdread" ]; then
  echo "/usr/local/etc/rc.d binary permissions:\n$usrrcdread" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$usrrcdread" ]; then
  echo "${cafe} m/usr/local/etc/rc.d binary permissions:${white}\n$usrrcdread"
        echo "\n"
      else
        :
      fi
  fi
}
AnlominusSUIDGUID(){
  #list of 'interesting' suid files - feel free to make additions
  findsuid=`find / -perm -4000 -type f 2>/dev/null`
  if [ "$outfile" ]; then
    if [ "$findsuid" ]; then
      echo "SUID files:\n$findsuid" >> $outfile
      echo "\n" >> $outfile
    else
      :
    fi
  else
    if [ "$findsuid" ]; then
      echo "${cafe} SUID files:${white}\n$findsuid"
      echo "\n"
    else
      :
    fi
  fi

  intsuid=`find / -perm -4000 -type f 2>/dev/null | grep -w 'nmap\|perl\|'awk'\|'find'\|'bash'\|'sh'\|'man'\|'more'\|'less'\|'vi'\|'vim'\|'nc'\|'netcat'\|python\|ruby\|lua\|irb\|pl' | xargs -r ls -la`
  if [ "$outfile" ]; then
  if [ "$intsuid" ]; then
  echo "***Possibly interesting SUID files:\n$intsuid" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$intsuid" ]; then
  echo "${yellow}***Possibly interesting SUID files:${white}\n$intsuid"
        echo "\n"
      else
        :
      fi
  fi

  wwsuid=`find / -perm -4007 -type f 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$wwsuid" ]; then
  echo "World-writable SUID files:\n$wwsuid" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$wwsuid" ]; then
  echo "${cafe} World-writable SUID files:${white}\n$wwsuid"
        echo "\n"
      else
        :
      fi
  fi

  wwsuidrt=`find / -uid 0 -perm -4007 -type f 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$wwsuidrt" ]; then
  echo "World-writable SUID files owned by root:\n$wwsuidrt" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$wwsuidrt" ]; then
  echo "${cafe} World-writable SUID files owned by root:${white}\n$wwsuidrt"
        echo "\n"
      else
        :
      fi
  fi

  findguid=`find / -perm -2000 -type f 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$findguid" ]; then
  echo "GUID files:\n$findguid" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$findguid" ]; then
  echo "${cafe} GUID files:${white}\n$findguid"
        echo "\n"
      else
        :
      fi
  fi

  #list of 'interesting' guid files - feel free to make additions
  intguid=`find / -perm -2000 -type f 2>/dev/null | grep -w 'nmap\|perl\|'awk'\|'find'\|'bash'\|'sh'\|'man'\|'more'\|'less'\|'vi'\|'vim'\|'nc'\|'netcat'\|python\|ruby\|lua\|irb\|pl' | xargs -r ls -la`
  if [ "$outfile" ]; then
  if [ "$intguid" ]; then
  echo "***Possibly interesting GUID files:\n$intguid" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$intguid" ]; then
  echo "${yellow}***Possibly interesting GUID files:${white}\n$intguid"
        echo "\n"
      else
        :
      fi
  fi

  wwguid=`find / -perm -2007 -type f 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$wwguid" ]; then
  echo "World-writable GUID files:\n$wwguid" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$wwguid" ]; then
  echo "${cafe} World-writable GUID files:${white}\n$wwguid"
        echo "\n"
      else
        :
      fi
  fi

  wwguidrt=`find / -uid 0 -perm -2007 -type f 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$wwguidrt" ]; then
  echo "World-writable GUID files owned by root:\n$wwguidrt" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$wwguidrt" ]; then
  echo "${cafe} All World-writable GUID files owned by root:${white}\n$wwguidrt"
        echo "\n"
      else
        :
      fi
  fi
}
AnlominusWorldWritable(){
  #list all world-writable files excluding /proc
  wwfiles=`find / ! -path "*/proc/*" -perm -2 -type f -print 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$wwfiles" ]; then
  echo "World-writable files (excluding /proc):\n$wwfiles" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$wwfiles" ]; then
  echo "${cafe} mWorld-writable files (excluding /proc):${white}\n$wwfiles"
        echo "\n"
      else
        :
      fi
  fi

  usrplan=`find /home -iname *.plan -exec ls -la {} \; -exec cat {} 2>/dev/null \;`
  if [ "$outfile" ]; then
  if [ "$usrplan" ]; then
  echo "Plan file permissions and contents:\n$usrplan" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$usrplan" ]; then
  echo "${cafe} mPlan file permissions and contents:${white}\n$usrplan"
        echo "\n"
      else
        :
      fi
  fi

  bsdusrplan=`find /usr/home -iname *.plan -exec ls -la {} \; -exec cat {} 2>/dev/null \;`
  if [ "$outfile" ]; then
  if [ "$bsdusrplan" ]; then
  echo "Plan file permissions and contents:\n$bsdusrplan" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$bsdusrplan" ]; then
  echo "${cafe} mPlan file permissions and contents:${white}\n$bsdusrplan"
        echo "\n"
      else
        :
      fi
  fi
  rhostsusr=`find /home -iname *.rhosts -exec ls -la {} 2>/dev/null \; -exec cat {} 2>/dev/null \;`
  if [ "$outfile" ]; then
  if [ "$rhostsusr" ]; then
  echo "rhost config file(s) and file contents:\n$rhostsusr" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$rhostsusr" ]; then
  echo "${cafe} mrhost config file(s) and file contents:${white}\n$rhostsusr"
        echo "\n"
      else
        :
      fi
  fi

  bsdrhostsusr=`find /usr/home -iname *.rhosts -exec ls -la {} 2>/dev/null \; -exec cat {} 2>/dev/null \;`
  if [ "$outfile" ]; then
  if [ "$bsdrhostsusr" ]; then
  echo "rhost config file(s) and file contents:\n$bsdrhostsusr" >> $outfile
        echo "\n" >> $outfile
      else
        :
      fi
  else
  if [ "$bsdrhostsusr" ]; then
  echo "${cafe} mrhost config file(s) and file contents:${white}\n$bsdrhostsusr"
        echo "\n"
      else
        :
      fi
  fi

  rhostssys=`find /etc -iname hosts.equiv -exec ls -la {} 2>/dev/null \; -exec cat {} 2>/dev/null \;`
  if [ "$outfile" ]; then
  if [ "$rhostssys" ]; then
  echo "Hosts.equiv file details and file contents:\n$rhostssys" >> $outfile
        echo "\n" >> $outfile
        else
        :
      fi
  else
  if [ "$rhostssys" ]; then
  echo "${cafe} mHosts.equiv file details and file contents: ${white}\n$rhostssys"
        echo "\n"
        else
        :
      fi
  fi

  nfsexports=`ls -la /etc/exports 2>/dev/null; cat /etc/exports 2>/dev/null`
  if [ "$outfile" ]; then
  if [ "$nfsexports" ]; then
  echo "NFS config details:\n$nfsexports" >> $outfile
        echo "\n" >> $outfile
        else
        :
      fi
  else
  if [ "$nfsexports" ]; then
  echo "${cafe} mNFS config details: ${white}\n$nfsexports"
        echo "\n"
        else
        :
      fi
  fi

  fstab=`cat /etc/fstab 2>/dev/null |grep username |awk '{sub(/.*\username=/,"");sub(/\,.*/,"")}1'| xargs -r echo username:; cat /etc/fstab 2>/dev/null |grep password |awk '{sub(/.*\password=/,"");sub(/\,.*/,"")}1'| xargs -r echo password:; cat /etc/fstab 2>/dev/null |grep domain |awk '{sub(/.*\domain=/,"");sub(/\,.*/,"")}1'| xargs -r echo domain:`
  if [ "$outfile" ]; then
  if [ "$fstab" ]; then
  echo "***Looks like there are credentials in /etc/fstab!\n$fstab" >> $outfile
        echo "\n" >> $outfile
        else
        :
      fi
  else
  if [ "$fstab" ]; then
  echo "\e[00;33m***Looks like there are credentials in /etc/fstab!${white}\n$fstab"
        echo "\n"
        else
        :
      fi
  fi

  fstabcred=`cat /etc/fstab 2>/dev/null |grep cred |awk '{sub(/.*\credentials=/,"");sub(/\,.*/,"")}1'| xargs -I{} sh -c 'ls -la {}; cat {}'`
  if [ "$outfile" ]; then
  if [ "$fstabcred" ]; then
  echo "***/etc/fstab contains a credentials file!\n$fstabcred" >> $outfile
          echo "\n" >> $outfile
          else
          :
      fi
  else
  if [ "$fstabcred" ]; then
  echo "\e[00;33m***/etc/fstab contains a credentials file!${white}\n$fstabcred"
          echo "\n"
          else
          :
      fi
  fi
}
################################################
#-----------) Privilege Escalation (-----------#
################################################
# |
ALMBar="${orange} ──[${blue}Anlominus${purple}@${red}PrivEsc${cyan}$~${orange}]──"

AnlominusPrivEsc(){
  while true; do
    clear
    BannerMan
    echo "  $cWall▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓$cWall"
    echo "  $cWall▓                                             ▓$cWall"
    echo "  $cWall▓  ╔═══════════════════════════════════════╗  ▓$cWall"
    echo "  $cWall▓  ╠═>  ${ALMBar}${cyan}   <==║  ▓$cWall"
    echo "  $cWall▓  ╠═══════════════════════════════════════╝  ▓$cWall"
    echo "  $cWall▓  ╠═▶ ${c0} - ${green}Linux System                     ${cyan}▓$cWall"
    echo "  $cWall▓  ╠═▶ ${c1} - ${green}Linux User and groups            ${cyan}▓$cWall"
    echo "  $cWall▓  ╠═▶ ${c2} - ${green}Linux Networks                   ${cyan}▓$cWall"
    echo "  $cWall▓  ╠═▶ ${c3} - ${green}Linux Job and Tasks              ${cyan}▓$cWall"
    echo "  $cWall▓  ╠═▶ ${c4} - ${green}Linux SUID and GUID              ${cyan}▓$cWall"
    echo "  $cWall▓  ╠═▶ ${c5} - ${green}Linux Services                   ${cyan}▓$cWall"
    echo "  $cWall▓  ╠═▶ $cx ${green}Exit                               ${cyan}▓$cWall"
    echo "  $cWall▓  ╚═➤ $promptOption                                       ${cyan}▓$cWall"
    PromptFun
    read cmd
    case ${cmd} in
      0)
      AnlominusSystem
      echo "
      $cInfo#############################################$cInfo
      $cInfo                                             $cInfo
      $cInfo  ╔═══════════════════════════════════════╗  $cInfo
      $cInfo  ╠═>    PRESS ENTER TO GOING BACK     <==║  $cInfo
      $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
      echo -n "      $cInfo  ╚═➤ "
      read read_somthing
      ;;
      1)
      AnlominusUsersGroups
      echo "
      $cInfo#############################################$cInfo
      $cInfo                                             $cInfo
      $cInfo  ╔═══════════════════════════════════════╗  $cInfo
      $cInfo  ╠═>    PRESS ENTER TO GOING BACK     <==║  $cInfo
      $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
      echo -n "      $cInfo  ╚═➤ "
      read read_somthing
      ;;
      2)
      AnlominusNetworks
      echo "
      $cInfo#############################################$cInfo
      $cInfo                                             $cInfo
      $cInfo  ╔═══════════════════════════════════════╗  $cInfo
      $cInfo  ╠═>    PRESS ENTER TO GOING BACK     <==║  $cInfo
      $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
      echo -n "      $cInfo  ╚═➤ "
      read read_somthing
      ;;
      3)
      AnlominusJobsTasks
      echo "
      $cInfo#############################################$cInfo
      $cInfo                                             $cInfo
      $cInfo  ╔═══════════════════════════════════════╗  $cInfo
      $cInfo  ╠═>    PRESS ENTER TO GOING BACK     <==║  $cInfo
      $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
      echo -n "      $cInfo  ╚═➤ "
      read read_somthing
      ;;
      4)
      AnlominusSUIDGUID
      # sh PrivEsc/Linux/linPEAS/linpeas_base.sh
      echo "
      $cInfo#############################################$cInfo
      $cInfo                                             $cInfo
      $cInfo  ╔═══════════════════════════════════════╗  $cInfo
      $cInfo  ╠═>    PRESS ENTER TO GOING BACK     <==║  $cInfo
      $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
      echo -n "      $cInfo  ╚═➤ "
      read read_somthing
      ;;
      5)
      AnlominusServices
      # bash PrivEsc/Linux/linux-smart-enumeration/lse.sh
      echo "
      $cInfo#############################################$cInfo
      $cInfo                                             $cInfo
      $cInfo  ╔═══════════════════════════════════════╗  $cInfo
      $cInfo  ╠═>    PRESS ENTER TO GOING BACK     <==║  $cInfo
      $cInfo  ╠═══════════════════════════════════════╝  $cInfo"
      echo -n "      $cInfo  ╚═➤ "
      read read_somthing
      ;;
      x|X|exit|Exit)
      clear
      Banner
      BannerExit
      sleep 0.3
      echo ""
      break
      ;;
      *)
      clear
      Banner
      echo "  $cFalse  ╔═══════════════════════════════════════╗  $cFalse "
      echo "  $cFalse  ╠═>      $cFalse invalid option!! $cFalse    <==║  $cFalse "
      echo "  $cFalse  ╚═══════════════════════════════════════╝  $cFalse "
      echo ""
      sleep 1
      clear
      ;;
    esac
  done
}
AnlominusPrivEsc
